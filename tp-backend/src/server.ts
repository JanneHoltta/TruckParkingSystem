import { AxiosResponse, AxiosResponseHeaders } from 'axios';
import { FastifyReply } from 'fastify';
import {
  errors, headers, schemas, types,
} from '@truck-parking/tp-api';
import Ajv from 'ajv';
import addFormats from 'ajv-formats';

// Bug in Ajv: https://github.com/sinclairzx81/typebox/issues/51
const validate = addFormats(new Ajv({ keywords: ['example'] })).compile(JSON.parse(JSON.stringify(schemas.userStatus)));

/**
 * An error type used to signal expected server errors. Can be identified with
 * `err instanceof ServerError`, after which the original server response can
 * be accessed using the `response` field.
 */
class ServerError<T> extends Error {
  readonly response: HandlerResponse<T>;

  constructor(response: HandlerResponse<T>) {
    // This is never printed, don't spend CPU time on string formatting
    super('server error');
    this.response = response;
  }
}

/**
 * Verifies that the response code from a server query matches expectations
 * @param resolveWith the expected success status codes
 * @param rejectWith the expected error status codes
 */
export const checkResponse = (
  resolveWith: number[], rejectWith?: number[],
) => (response: AxiosResponse): AxiosResponse => {
  // If the response status code is an expected server error, wrap the response
  // in an exception that can be identified later for propagation to the frontend
  if (rejectWith?.includes(response.status)) {
    throw new ServerError({ headers: response.headers, code: response.status, body: response.data });
  }

  // If the response status is an unknown error, throw an error for logging here
  if (!resolveWith.includes(response.status)) {
    // noinspection ExceptionCaughtLocallyJS
    throw new Error(`got invalid response code from server: ${response.status}`);
  }

  // Pass through all expected success responses
  return response;
};

/**
 * Extracts the user status header from the given Axios headers and validates it
 * @param responseHeaders the Axios response headers
 */
const extractUserStatusHeader = (responseHeaders: AxiosResponseHeaders): string | undefined => {
  const userStatus = responseHeaders[headers.userStatus.toLowerCase()];
  if (userStatus) {
    if (!validate(JSON.parse(userStatus))) {
      throw new Error(`server sent an invalid ${headers.userStatus} header: ${userStatus}`);
    }
  }

  return userStatus;
};

/**
 * Type used for handler responses, they must return a response body and a response status code
 */
interface HandlerResponse<T> {
  headers: AxiosResponseHeaders
  code: number,
  body: T,
}

/**
 * Helper for querying the server; handles logging, returns and errors
 * @param response the response object generated by Fastify
 * @param handler the actual handler code to run
 */
export const serverQuery = async <T>(response: FastifyReply, handler: () =>
Promise<HandlerResponse<T>>): Promise<types.Error | T> => {
  try {
    // Invoke the handler
    const { headers: responseHeaders, code, body } = await handler();

    // Extract the user status header
    const userStatusHeader = extractUserStatusHeader(responseHeaders);
    if (userStatusHeader) {
      // Forward it if was given and valid
      response.header(headers.userStatus, userStatusHeader);
    }

    // Set the response code and return the response body
    response.code(code);
    return body;
  } catch (err) {
    // If the error is an expected server error that should be
    // passed through to the frontend, don't treat it as fatal
    if (err instanceof ServerError) {
      response.code(err.response.code);
      return err.response.body;
    }

    // Caught an error, log it
    response.log.error(err);

    // Return the invalid server response error
    response.code(errors.invalidServerResponse.statusCode);
    return errors.invalidServerResponse;
  }
};
